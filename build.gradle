plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
//	id 'jacoco'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

//jacoco {
//	toolVersion = '0.8.5'
//}
//
//jacocoTestReport {
//	dependsOn test
//	reports {
//		html.enabled true
//		xml.enabled true
//		csv.enabled true
//
//		html.destination file("src/jacoco/jacoco.html")
//		xml.destination file("src/jacoco/jacoco.xml")
//	}
//
//	def Qdomains = []
//	for (qPattern in '**/QA'..'**/QZ') {
//		Qdomains.add(qPattern + '*')
//	}
//
//	afterEvaluate {
//		classDirectories.setFrom(
//				files(classDirectories.files.collect {
//					fileTree(dir: it, excludes: [
//							"**/*Application*",
//							"**/*Config*",
//							"**/*Dto*",
//							"**/*Request*",
//							"**/*Response*",
//							"**/*Interceptor*",
//							"**/*Exception*"
//					] + Qdomains)
//				})
//		)
//	}
//	finalizedBy 'jacocoTestCoverageVerification'
//}
//
//jacocoTestCoverageVerification {
//	def Qdomains = []
//	for (qPattern in '*.QA'..'*.QZ') {
//		Qdomains.add(qPattern + '*')
//	}
//
//	violationRules {
//		rule {
//			element = 'CLASS'
//			enabled = true
//
//			limit {
//				counter = 'CLASS'
//				value = 'COVEREDRATIO'
//				minimum = 0.60
//			}
//
//			limit {
//				counter = 'METHOD'
//				value = 'COVEREDRATIO'
//				minimum = 0.40
//			}
//
//			excludes = [
//					"**.*Application*",
//					"**.*Config*",
//					"**.*Dto*",
//					"**.*Request*",
//					"**.*Response*",
//					"**.*Interceptor*",
//					"**.*Exception*"
//			] + Qdomains
//		}
//	}
//}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'


	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor 'org.projectlombok:lombok'

}

test {
	useJUnitPlatform()
//	finalizedBy 'jacocoTestReport'
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}